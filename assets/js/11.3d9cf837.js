(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{222:function(t,s,e){"use strict";e.r(s);var a=e(0),c=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"tcp-ip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip"}},[t._v("#")]),t._v(" TCP/IP")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("TCP/IP协议模型（Transmission Control Protocol/Internet Protocol），包含了一系列构成互联网基础的网络协议，是Internet的核心协议。")])]),t._v(" "),e("h2",{attrs:{id:"tcp连接的建立"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp连接的建立"}},[t._v("#")]),t._v(" TCP连接的建立")]),t._v(" "),e("p",[t._v("TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://xx93.club/static/blog/browser/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png",alt:"三次握手"}})]),t._v(" "),e("h3",{attrs:{id:"第一次握手-syn-1-，seq-x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一次握手-syn-1-，seq-x"}},[t._v("#")]),t._v(" 第一次握手("),e("code",[t._v("SYN=1,，seq=x")]),t._v(")")]),t._v(" "),e("p",[t._v("建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。")])]),t._v(" "),e("h3",{attrs:{id:"第二次握手-syn-1，ack-1，ack-x-1，seq-y"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二次握手-syn-1，ack-1，ack-x-1，seq-y"}},[t._v("#")]),t._v(" 第二次握手("),e("code",[t._v("SYN=1，ACK=1，ack=x+1，seq=y")]),t._v(")")]),t._v(" "),e("p",[t._v("服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("ACK报文段（ACK=1的报文段）可以携带数据， 但是如果不携带数据则不消耗序号")])]),t._v(" "),e("h3",{attrs:{id:"第三次握手-ack-1，ack-y-1，seq-z"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三次握手-ack-1，ack-y-1，seq-z"}},[t._v("#")]),t._v(" 第三次握手("),e("code",[t._v("ACK=1，ack=y+1，seq=z")]),t._v(")")]),t._v(" "),e("p",[t._v("客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("为什么要三次握手？")]),t._v(" "),e("p",[t._v("为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。")]),t._v(" "),e("p",[t._v("具体例子：“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”")])]),t._v(" "),e("h2",{attrs:{id:"tcp连接的断开"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp连接的断开"}},[t._v("#")]),t._v(" TCP连接的断开")]),t._v(" "),e("p",[t._v("当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次挥手”。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://xx93.club/static/blog/browser/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png",alt:"四次挥手"}})]),t._v(" "),e("h3",{attrs:{id:"第一次挥手-fin-1，seq-x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一次挥手-fin-1，seq-x"}},[t._v("#")]),t._v(" 第一次挥手("),e("code",[t._v("FIN=1，seq=x")]),t._v(")")]),t._v(" "),e("p",[t._v("主动方（可以是客户端，也可以是服务器），设置Sequence Number = x，向被动方发送一个FIN报文段；此时，主动方进入FIN_WAIT_1 （终止等待1） 状态；这表示主动方没有数据要发送给被动方了；")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。")])]),t._v(" "),e("h3",{attrs:{id:"第二次挥手-ack-1，ack-x-1，seq-y"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二次挥手-ack-1，ack-x-1，seq-y"}},[t._v("#")]),t._v(" 第二次挥手("),e("code",[t._v("ACK=1，ack=x+1，seq=y")]),t._v(")")]),t._v(" "),e("p",[t._v("被动方收到了主动方发送的FIN报文段，向主动方回一个ACK报文段，Acknowledgment Number为x + 1，设置Sequence Number = y；被动方进入CLOSE_WAIT （关闭等待） 状态，主动方接收到应答报文后进入FIN_WAIT_2（终止等待2）状态；被动方告诉主动方，我“同意”你的关闭请求；")]),t._v(" "),e("h3",{attrs:{id:"第三次挥手-ack-1，fin-1，ack-x-1，seq-z"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三次挥手-ack-1，fin-1，ack-x-1，seq-z"}},[t._v("#")]),t._v(" 第三次挥手("),e("code",[t._v("ACK=1，FIN=1，ack=x+1，seq=z")]),t._v(")")]),t._v(" "),e("p",[t._v("被动方向主动方发送FIN + ACK报文段，请求关闭连接，同时被动方进入LAST_ACK（ 最后确认 ）状态；")]),t._v(" "),e("h3",{attrs:{id:"第四次挥手-ack-1，ack-z-1-seq-x-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第四次挥手-ack-1，ack-z-1-seq-x-1"}},[t._v("#")]),t._v(" 第四次挥手 ("),e("code",[t._v("ACK=1，ack=z+1,seq=x+1")]),t._v(")")]),t._v(" "),e("p",[t._v("主动方收到被动方发送的FIN报文段，向被动方发送ACK报文段，然后主动方进入TIME_WAIT状态；被动方收到主动方的ACK报文段以后，进入CLOSED状态关闭连接；此时，主动方等待2*MSL（ 最长报文段寿命 ）后依然没有收到回复，则证明Server端已正常关闭，那好，主动方也可以关闭连接了。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("主动方为什么要等待2*MSL")]),t._v(" "),e("p",[t._v("MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。")])]),t._v(" "),e("li",[e("p",[t._v("防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。")])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("为什么建立连接是三次握手，关闭连接确是四次挥手呢？")]),t._v(" "),e("p",[t._v("建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。")])]),t._v(" "),e("p",[t._v("参考：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.im/post/598ba1d06fb9a03c4d6464ab#heading-16",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于 TCP/IP"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/qzcsu/article/details/72861891",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP连接建立与断开"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=c.exports}}]);